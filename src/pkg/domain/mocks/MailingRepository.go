// Code generated by MockGen. DO NOT EDIT.
// Source: src/pkg/domain/emails.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "google.golang.org/api/gmail/v1"
)

// MockMailingRepository is a mock of MailingRepository interface.
type MockMailingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMailingRepositoryMockRecorder
}

// MockMailingRepositoryMockRecorder is the mock recorder for MockMailingRepository.
type MockMailingRepositoryMockRecorder struct {
	mock *MockMailingRepository
}

// NewMockMailingRepository creates a new mock instance.
func NewMockMailingRepository(ctrl *gomock.Controller) *MockMailingRepository {
	mock := &MockMailingRepository{ctrl: ctrl}
	mock.recorder = &MockMailingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailingRepository) EXPECT() *MockMailingRepositoryMockRecorder {
	return m.recorder
}

// GetMessageBody mocks base method.
func (m *MockMailingRepository) GetMessageBody(bannerURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageBody", bannerURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageBody indicates an expected call of GetMessageBody.
func (mr *MockMailingRepositoryMockRecorder) GetMessageBody(bannerURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageBody", reflect.TypeOf((*MockMailingRepository)(nil).GetMessageBody), bannerURL)
}

// GetSubscribed mocks base method.
func (m *MockMailingRepository) GetSubscribed() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribed")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribed indicates an expected call of GetSubscribed.
func (mr *MockMailingRepositoryMockRecorder) GetSubscribed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribed", reflect.TypeOf((*MockMailingRepository)(nil).GetSubscribed))
}

// InsertNewEmail mocks base method.
func (m *MockMailingRepository) InsertNewEmail(emails []string, toInsert string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewEmail", emails, toInsert)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewEmail indicates an expected call of InsertNewEmail.
func (mr *MockMailingRepositoryMockRecorder) InsertNewEmail(emails, toInsert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewEmail", reflect.TypeOf((*MockMailingRepository)(nil).InsertNewEmail), emails, toInsert)
}

// SendMessage mocks base method.
func (m *MockMailingRepository) SendMessage(message *v1.Message, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", message, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMailingRepositoryMockRecorder) SendMessage(message, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMailingRepository)(nil).SendMessage), message, body)
}

// SendToSubscribed mocks base method.
func (m *MockMailingRepository) SendToSubscribed(messageBody string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToSubscribed", messageBody)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendToSubscribed indicates an expected call of SendToSubscribed.
func (mr *MockMailingRepositoryMockRecorder) SendToSubscribed(messageBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToSubscribed", reflect.TypeOf((*MockMailingRepository)(nil).SendToSubscribed), messageBody)
}
