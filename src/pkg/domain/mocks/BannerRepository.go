// Code generated by MockGen. DO NOT EDIT.
// Source: src/pkg/domain/images.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "genesis_test_case/src/pkg/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// GetCryptoBannerUrl mocks base method.
func (m *MockImageRepository) GetCryptoBannerUrl(chart []float64, rate *domain.CurrencyRate) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCryptoBannerUrl", chart, rate)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCryptoBannerUrl indicates an expected call of GetCryptoBannerUrl.
func (mr *MockImageRepositoryMockRecorder) GetCryptoBannerUrl(chart, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCryptoBannerUrl", reflect.TypeOf((*MockImageRepository)(nil).GetCryptoBannerUrl), chart, rate)
}
