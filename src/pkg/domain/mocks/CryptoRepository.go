// Code generated by MockGen. DO NOT EDIT.
// Source: src/pkg/domain/crypto.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "genesis_test_case/src/pkg/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCryptoRepository is a mock of CryptoRepository interface.
type MockCryptoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoRepositoryMockRecorder
}

// MockCryptoRepositoryMockRecorder is the mock recorder for MockCryptoRepository.
type MockCryptoRepositoryMockRecorder struct {
	mock *MockCryptoRepository
}

// NewMockCryptoRepository creates a new mock instance.
func NewMockCryptoRepository(ctrl *gomock.Controller) *MockCryptoRepository {
	mock := &MockCryptoRepository{ctrl: ctrl}
	mock.recorder = &MockCryptoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoRepository) EXPECT() *MockCryptoRepositoryMockRecorder {
	return m.recorder
}

// GetCandles mocks base method.
func (m *MockCryptoRepository) GetCandles(candleProps *domain.CandleProps) ([][]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandles", candleProps)
	ret0, _ := ret[0].([][]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandles indicates an expected call of GetCandles.
func (mr *MockCryptoRepositoryMockRecorder) GetCandles(candleProps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandles", reflect.TypeOf((*MockCryptoRepository)(nil).GetCandles), candleProps)
}

// GetCurrencyRate mocks base method.
func (m *MockCryptoRepository) GetCurrencyRate(base, quoted string) (*domain.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRate", base, quoted)
	ret0, _ := ret[0].(*domain.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRate indicates an expected call of GetCurrencyRate.
func (mr *MockCryptoRepositoryMockRecorder) GetCurrencyRate(base, quoted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRate", reflect.TypeOf((*MockCryptoRepository)(nil).GetCurrencyRate), base, quoted)
}

// GetWeekChart mocks base method.
func (m *MockCryptoRepository) GetWeekChart() ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeekChart")
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeekChart indicates an expected call of GetWeekChart.
func (mr *MockCryptoRepositoryMockRecorder) GetWeekChart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeekChart", reflect.TypeOf((*MockCryptoRepository)(nil).GetWeekChart))
}
