// Code generated by MockGen. DO NOT EDIT.
// Source: src/pkg/usecase/contracts.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "genesis_test_case/src/pkg/domain"
	usecase "genesis_test_case/src/pkg/usecase"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMailingRepository is a mock of MailingRepository interface.
type MockMailingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMailingRepositoryMockRecorder
}

// MockMailingRepositoryMockRecorder is the mock recorder for MockMailingRepository.
type MockMailingRepositoryMockRecorder struct {
	mock *MockMailingRepository
}

// NewMockMailingRepository creates a new mock instance.
func NewMockMailingRepository(ctrl *gomock.Controller) *MockMailingRepository {
	mock := &MockMailingRepository{ctrl: ctrl}
	mock.recorder = &MockMailingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailingRepository) EXPECT() *MockMailingRepositoryMockRecorder {
	return m.recorder
}

// MultipleSending mocks base method.
func (m *MockMailingRepository) MultipleSending(message *domain.EmailMessage, adresses []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultipleSending", message, adresses)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultipleSending indicates an expected call of MultipleSending.
func (mr *MockMailingRepositoryMockRecorder) MultipleSending(message, adresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultipleSending", reflect.TypeOf((*MockMailingRepository)(nil).MultipleSending), message, adresses)
}

// MockEmailStorage is a mock of EmailStorage interface.
type MockEmailStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEmailStorageMockRecorder
}

// MockEmailStorageMockRecorder is the mock recorder for MockEmailStorage.
type MockEmailStorageMockRecorder struct {
	mock *MockEmailStorage
}

// NewMockEmailStorage creates a new mock instance.
func NewMockEmailStorage(ctrl *gomock.Controller) *MockEmailStorage {
	mock := &MockEmailStorage{ctrl: ctrl}
	mock.recorder = &MockEmailStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailStorage) EXPECT() *MockEmailStorageMockRecorder {
	return m.recorder
}

// AddEmail mocks base method.
func (m *MockEmailStorage) AddEmail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEmail indicates an expected call of AddEmail.
func (mr *MockEmailStorageMockRecorder) AddEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmail", reflect.TypeOf((*MockEmailStorage)(nil).AddEmail), email)
}

// GetAllEmails mocks base method.
func (m *MockEmailStorage) GetAllEmails() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmails")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmails indicates an expected call of GetAllEmails.
func (mr *MockEmailStorageMockRecorder) GetAllEmails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmails", reflect.TypeOf((*MockEmailStorage)(nil).GetAllEmails))
}

// MockExchangeProvider is a mock of ExchangeProvider interface.
type MockExchangeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeProviderMockRecorder
}

// MockExchangeProviderMockRecorder is the mock recorder for MockExchangeProvider.
type MockExchangeProviderMockRecorder struct {
	mock *MockExchangeProvider
}

// NewMockExchangeProvider creates a new mock instance.
func NewMockExchangeProvider(ctrl *gomock.Controller) *MockExchangeProvider {
	mock := &MockExchangeProvider{ctrl: ctrl}
	mock.recorder = &MockExchangeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeProvider) EXPECT() *MockExchangeProviderMockRecorder {
	return m.recorder
}

// GetCurrencyRate mocks base method.
func (m *MockExchangeProvider) GetCurrencyRate(pair *domain.CurrencyPair) (*domain.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRate", pair)
	ret0, _ := ret[0].(*domain.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRate indicates an expected call of GetCurrencyRate.
func (mr *MockExchangeProviderMockRecorder) GetCurrencyRate(pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRate", reflect.TypeOf((*MockExchangeProvider)(nil).GetCurrencyRate), pair)
}

// MockChartProvider is a mock of ChartProvider interface.
type MockChartProvider struct {
	ctrl     *gomock.Controller
	recorder *MockChartProviderMockRecorder
}

// MockChartProviderMockRecorder is the mock recorder for MockChartProvider.
type MockChartProviderMockRecorder struct {
	mock *MockChartProvider
}

// NewMockChartProvider creates a new mock instance.
func NewMockChartProvider(ctrl *gomock.Controller) *MockChartProvider {
	mock := &MockChartProvider{ctrl: ctrl}
	mock.recorder = &MockChartProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChartProvider) EXPECT() *MockChartProviderMockRecorder {
	return m.recorder
}

// GetWeekAverageChart mocks base method.
func (m *MockChartProvider) GetWeekAverageChart(pair *domain.CurrencyPair) ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeekAverageChart", pair)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeekAverageChart indicates an expected call of GetWeekAverageChart.
func (mr *MockChartProviderMockRecorder) GetWeekAverageChart(pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeekAverageChart", reflect.TypeOf((*MockChartProvider)(nil).GetWeekAverageChart), pair)
}

// MockExchangeProviderNode is a mock of ExchangeProviderNode interface.
type MockExchangeProviderNode struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeProviderNodeMockRecorder
}

// MockExchangeProviderNodeMockRecorder is the mock recorder for MockExchangeProviderNode.
type MockExchangeProviderNodeMockRecorder struct {
	mock *MockExchangeProviderNode
}

// NewMockExchangeProviderNode creates a new mock instance.
func NewMockExchangeProviderNode(ctrl *gomock.Controller) *MockExchangeProviderNode {
	mock := &MockExchangeProviderNode{ctrl: ctrl}
	mock.recorder = &MockExchangeProviderNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeProviderNode) EXPECT() *MockExchangeProviderNodeMockRecorder {
	return m.recorder
}

// GetCurrencyRate mocks base method.
func (m *MockExchangeProviderNode) GetCurrencyRate(pair *domain.CurrencyPair) (*domain.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRate", pair)
	ret0, _ := ret[0].(*domain.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRate indicates an expected call of GetCurrencyRate.
func (mr *MockExchangeProviderNodeMockRecorder) GetCurrencyRate(pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRate", reflect.TypeOf((*MockExchangeProviderNode)(nil).GetCurrencyRate), pair)
}

// SetNext mocks base method.
func (m *MockExchangeProviderNode) SetNext(exchanger usecase.ExchangeProviderNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNext", exchanger)
}

// SetNext indicates an expected call of SetNext.
func (mr *MockExchangeProviderNodeMockRecorder) SetNext(exchanger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockExchangeProviderNode)(nil).SetNext), exchanger)
}

// MockExchangersChain is a mock of ExchangersChain interface.
type MockExchangersChain struct {
	ctrl     *gomock.Controller
	recorder *MockExchangersChainMockRecorder
}

// MockExchangersChainMockRecorder is the mock recorder for MockExchangersChain.
type MockExchangersChainMockRecorder struct {
	mock *MockExchangersChain
}

// NewMockExchangersChain creates a new mock instance.
func NewMockExchangersChain(ctrl *gomock.Controller) *MockExchangersChain {
	mock := &MockExchangersChain{ctrl: ctrl}
	mock.recorder = &MockExchangersChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangersChain) EXPECT() *MockExchangersChainMockRecorder {
	return m.recorder
}

// GetExchanger mocks base method.
func (m *MockExchangersChain) GetExchanger(name string) usecase.ExchangeProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchanger", name)
	ret0, _ := ret[0].(usecase.ExchangeProvider)
	return ret0
}

// GetExchanger indicates an expected call of GetExchanger.
func (mr *MockExchangersChainMockRecorder) GetExchanger(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchanger", reflect.TypeOf((*MockExchangersChain)(nil).GetExchanger), name)
}

// RegisterExchanger mocks base method.
func (m *MockExchangersChain) RegisterExchanger(name string, exchanger, next usecase.ExchangeProviderNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterExchanger", name, exchanger, next)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterExchanger indicates an expected call of RegisterExchanger.
func (mr *MockExchangersChainMockRecorder) RegisterExchanger(name, exchanger, next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterExchanger", reflect.TypeOf((*MockExchangersChain)(nil).RegisterExchanger), name, exchanger, next)
}

// MockCryptoBannerProvider is a mock of CryptoBannerProvider interface.
type MockCryptoBannerProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoBannerProviderMockRecorder
}

// MockCryptoBannerProviderMockRecorder is the mock recorder for MockCryptoBannerProvider.
type MockCryptoBannerProviderMockRecorder struct {
	mock *MockCryptoBannerProvider
}

// NewMockCryptoBannerProvider creates a new mock instance.
func NewMockCryptoBannerProvider(ctrl *gomock.Controller) *MockCryptoBannerProvider {
	mock := &MockCryptoBannerProvider{ctrl: ctrl}
	mock.recorder = &MockCryptoBannerProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoBannerProvider) EXPECT() *MockCryptoBannerProviderMockRecorder {
	return m.recorder
}

// GetCryptoBannerUrl mocks base method.
func (m *MockCryptoBannerProvider) GetCryptoBannerUrl(chart []float64, rate *domain.CurrencyRate) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCryptoBannerUrl", chart, rate)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCryptoBannerUrl indicates an expected call of GetCryptoBannerUrl.
func (mr *MockCryptoBannerProviderMockRecorder) GetCryptoBannerUrl(chart, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCryptoBannerUrl", reflect.TypeOf((*MockCryptoBannerProvider)(nil).GetCryptoBannerUrl), chart, rate)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetCache mocks base method.
func (m *MockCache) GetCache(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache.
func (mr *MockCacheMockRecorder) GetCache(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockCache)(nil).GetCache), key)
}

// SetCache mocks base method.
func (m *MockCache) SetCache(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCache", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCache indicates an expected call of SetCache.
func (mr *MockCacheMockRecorder) SetCache(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCache", reflect.TypeOf((*MockCache)(nil).SetCache), key, value)
}

// MockCryptoCache is a mock of CryptoCache interface.
type MockCryptoCache struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoCacheMockRecorder
}

// MockCryptoCacheMockRecorder is the mock recorder for MockCryptoCache.
type MockCryptoCacheMockRecorder struct {
	mock *MockCryptoCache
}

// NewMockCryptoCache creates a new mock instance.
func NewMockCryptoCache(ctrl *gomock.Controller) *MockCryptoCache {
	mock := &MockCryptoCache{ctrl: ctrl}
	mock.recorder = &MockCryptoCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoCache) EXPECT() *MockCryptoCacheMockRecorder {
	return m.recorder
}

// GetCurrencyCache mocks base method.
func (m *MockCryptoCache) GetCurrencyCache(key string) (*domain.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyCache", key)
	ret0, _ := ret[0].(*domain.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyCache indicates an expected call of GetCurrencyCache.
func (mr *MockCryptoCacheMockRecorder) GetCurrencyCache(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyCache", reflect.TypeOf((*MockCryptoCache)(nil).GetCurrencyCache), key)
}

// SetCurrencyCache mocks base method.
func (m *MockCryptoCache) SetCurrencyCache(key string, rate *domain.CurrencyRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrencyCache", key, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrencyCache indicates an expected call of SetCurrencyCache.
func (mr *MockCryptoCacheMockRecorder) SetCurrencyCache(key, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrencyCache", reflect.TypeOf((*MockCryptoCache)(nil).SetCurrencyCache), key, rate)
}

// MockCryptoLogger is a mock of CryptoLogger interface.
type MockCryptoLogger struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoLoggerMockRecorder
}

// MockCryptoLoggerMockRecorder is the mock recorder for MockCryptoLogger.
type MockCryptoLoggerMockRecorder struct {
	mock *MockCryptoLogger
}

// NewMockCryptoLogger creates a new mock instance.
func NewMockCryptoLogger(ctrl *gomock.Controller) *MockCryptoLogger {
	mock := &MockCryptoLogger{ctrl: ctrl}
	mock.recorder = &MockCryptoLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoLogger) EXPECT() *MockCryptoLoggerMockRecorder {
	return m.recorder
}

// LogExchangeRate mocks base method.
func (m *MockCryptoLogger) LogExchangeRate(provider string, rate *domain.CurrencyRate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogExchangeRate", provider, rate)
}

// LogExchangeRate indicates an expected call of LogExchangeRate.
func (mr *MockCryptoLoggerMockRecorder) LogExchangeRate(provider, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogExchangeRate", reflect.TypeOf((*MockCryptoLogger)(nil).LogExchangeRate), provider, rate)
}
